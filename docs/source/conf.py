# pylint: disable=C0103,W0622
"""Configuration file for the Sphinx documentation builder.
"""
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import subprocess
from datetime import date

import sys
import re

sys.path.insert(0, os.path.abspath("../../hux/api/"))


# -- Project information -----------------------------------------------------
TODAY = date.today()

project = "HUX Unified Solution"
copyright = f"{TODAY.year}, HUX by Deloitte Digital"
author = "HUX by Deloitte Digital"

# The short X.Y version
first_day_of_the_year = TODAY.replace(month=1, day=1)
try:
    # Try calculating an "informed" version via number of revisions we've had
    # We could use `git rev-list --count` but this makes the numbers smaller...
    revision = subprocess.run(
        [
            "git",
            "log",
            "--since",
            first_day_of_the_year.isoformat(),
            "--pretty=%H",
        ],
        check=True,
        stdout=subprocess.PIPE,
    ).stdout.count(b"\n")
except (FileNotFoundError, subprocess.CalledProcessError):
    # Fall back to just the date if something went wrong.
    version = TODAY.strftime("v%Y.%m.%d")
else:
    version = f"v{TODAY.year}.{revision}"
# The full version, including alpha/beta/rc tags
release = version

rtd_version = os.environ.get("READTHEDOCS_VERSION")
if not rtd_version:
    rtd_version = "latest"

# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.autosectionlabel",
    "sphinx.ext.autosummary",
    "sphinx.ext.coverage",
    "sphinx.ext.doctest",
    "sphinx.ext.extlinks",
    "sphinx.ext.imgconverter",
    "sphinx.ext.intersphinx",
    "sphinx.ext.napoleon",
    "sphinx.ext.todo",
    "sphinx.ext.viewcode",
    "sphinxcontrib.spelling",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string.
# source_suffix = [".rst", ".md"]
source_suffix = ".rst"

# The master toctree document.
master_doc = "index"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = [".*", "_*", "Thumbs.db", ".DS_Store", "README.rst", "*test*"]


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "furo"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["static"]

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
html_logo = "static/img/logo.jpg"

# -- Extension configuration -------------------------------------------------
# Display todo lists
todo_include_todos = False

# -- Options for autodoc --------------------------------------------------
autodoc_default_options = {
    "members": None,
}
autodoc_mock_imports = [
    "flask_marshmallow",
    "marshmallow",
    "flasgger",
    "flask",
    "flask_cors",
    "flask_apscheduler",
    "flask_limiter",
    "decouple",
    "aiohttp",
    "async_timeout",
    "jira",
    "boto3",
    "botocore",
    "prometheus_client",
    "prometheus_flask_exporter",
]

# -- Options for autosummary ----------------------------------------------
autosummary_generate = True
autosummary_generate_overwrite = True

# -- Options for autosectionlabel -----------------------------------------

# Prefix each section label with the name of the document it is in
autosectionlabel_prefix_document = True
# Limit the depth that autogenerated refs are created for
autosectionlabel_maxdepth = 3

suppress_warnings = ["autosectionlabel.*"]

# -- Options for the linkcheck builder ------------------------------------

linkcheck_retries = 2
linkcheck_timeout = 30  # seconds
linkcheck_workers = 30  # threads


def entire_domain(host: str) -> str:
    """Used by internal function to get the entire domain value.

    Args:
        host (str): The host name.

    Returns:
        str: the entire domain name.
    """

    return r"http.?://" + re.escape(host) + r"($|/.*)"


linkcheck_ignore = [
    r"https://github.com/DeloitteHux/",
    r"https://deloittedigital-ms.okta.com",
    r"https://confluence.hux.deloitte.com/",
    r"https://unified",
    r"https://argocd",
    r"https://customer-profile",
    r"https://connections-api",
    r"https://argocd",
    r"https://grafana",
    r"https://docs.github.com/",  # github docs break linkcheck
]

linkcheck_allowed_redirects = {
    # For CI
    r"https://docs-int.hux.deloitte.com/docs/.*": r"https://docs.hux.deloitte.com/docs/.*"
}

linkcheck_anchors = False
