# This is the CI pipeline for Unified Solution API

version: "1.0"

stages:
  - prepare
  - git
  - build_tag
  - docker
  - test
  - artifactory
  - argo-deploy

steps:

  PrepareBuildDetails:
    stage: prepare
    title: Prepare Build Details
    type: parallel
    steps:
      BuildName:
        stage: prepare
        title: Set build variables
        image: alpine
        commands:
          - cf_export BUILD_NAME_API=unified-api
          - cf_export CF_REPO_NAME=Hux-Unified-Solution
          - cf_export CF_REPO_OWNER=DeloitteHux
          - cf_export JFROG_REGISTRY=unified-docker-dev-local
          - cf_export APP_NAME=unified-api
          - cf_export FILE_NAME=values-main-use1-xspdev.yaml

      BuildNumber:
        stage: prepare
        title: Bump default BUILD_NUMBER annotation
        type: bump-build-number

  CloneRepository:
    stage: git
    title: Cloning ${{CF_REPO_NAME}} repository...
    type: git-clone
    repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
    revision: '${{CF_BRANCH}}' # Git branch triggering the pipeline

# Below steps "NumberTag" and "VersionTag" can be used to conditionally tag build image based on the Git Branch.

  NumberTag:
    stage: build_tag
    description: Set docker tag from build number
    type: freestyle
    image: alpine
    commands:
      - cf_export DOCKER_TAG=${{CF_BUILD_NUMBER}}

# Below step can be used for tagging image with Git_Release_Tag and will only execute for "main" branch
  # VersionTag:
  #   stage: build_tag
  #   description: Set docker tag based Git tag
  #   type: freestyle
  #   image: alpine
  #   commands:
  #     - cf_export DOCKER_TAG=${{CF_RELEASE_TAG}}
  #   when:
  #     condition:
  #       all:
  #         masterBranch: '"${{CF_BRANCH}}" == "main"'

# To be used when Dockerfile is available
  # DockerBuild:
  #   stage: docker
  #   title: Building Docker Image for Unified API
  #   type: build
  #   image_name: '${{BUILD_NAME_API}}'
  #   working_directory: ${{CF_REPO_NAME}}
  #   tag: '${{DOCKER_TAG}}'
  #   dockerfile: Dockerfile

  TestImage:
    stage: test
    title: Running Test Cases
    type: freestyle
    image: "ubuntu:latest"
    working_directory: ${{CF_REPO_NAME}}
    commands:
      - "ls"

  # PublishToArtifactory:
  #   stage: artifactory
  #   title: Publish Unified API Image to JFrog Artifactory
  #   type: deloittehux/jfrog-docker-publish
  #   arguments:
  #     BUILD_NAME: '${{BUILD_NAME_API}}'
  #     BUILD_NUMBER: '${{DOCKER_TAG}}'
  #     JFROG_REGISTRY: '${{JFROG_REGISTRY}}'
  #     BUILD_TAG: '${{DOCKER_TAG}}'

  deployment:
    stage: argo-deploy
    description: "Deploy the application"
    type: freestyle
    image: codefresh/cli:latest
    commands:
      - >-
        codefresh run Hux_Unified_Solution/unified_solution_cd -d -t
        DeloitteHux/Hux-Unified-Solution-Deploy -b 'main' --variable
        DOCKER_TAG=${{DOCKER_TAG}} --variable FILE_NAME="${{FILE_NAME}}"
        --variable APP_NAME="${{APP_NAME}}" --variable
        COMMIT_MESSAGE="${{CF_COMMIT_MESSAGE}}" --variable
        COMMIT_AUTHOR="${{CF_COMMIT_AUTHOR}}"
