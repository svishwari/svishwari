---
test_name: Test Audience Rules API

strict:
  - json:list_any_order

includes:
  - !include common.yaml

stages:
  - name: Test Retrieving Audience Rules

    # Define the request to be made...
    request:
      url: "{host}/{version}/audiences/rules"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {token}"

    response:
      strict: false
      status_code: 200
      headers:
        content-type: application/json
      json:
        text_operators:
          contains: "Contains"
          not_contains: "Does not contain"
          equals: "Equals"
          not_equals: "Does not equal"
        rule_attributes:
          model_scores:
            propensity_to_unsubscribe:
              name: !anystr
              type: !anystr
              min: !anyfloat
              max: !anyfloat
              steps: !anyfloat
            ltv_predicted:
              name: !anystr
              type: !anystr
              min: !anyint
              max: !anyfloat
              steps: !anyint
            propensity_to_purchase:
              name: !anystr
              type: !anystr
              min: !anyfloat
              max: !anyfloat
              steps: !anyfloat
          general:
            age:
              name: !anystr
              type: !anystr
              min: !anyint
              max: !anyint
            email:
              name: !anystr
              type: !anystr
            gender:
              name: !anystr
              type: !anystr
              options: !anylist
            location:
              name: !anystr
              country:
                name: !anystr
                type: !anystr
                options: !anylist
              state:
                name: !anystr
                type: !anystr
                options: !anylist
              city:
                name: !anystr
                type: !anystr
                options: !anylist
              zip_code:
                name: !anystr
                type: !anystr



---
test_name: Test Retrieve all audiences API

strict:
  - json:list_any_order

includes:
  - !include common.yaml

stages:
  - name: Test Retrieving all audiences

    # Define the request to be made...
    request:
      url: "{host}/{version}/audiences"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {token}"
      params:
        lookalikeable: false
        deliveries: 2

    response:
      status_code: 200
      headers:
        content-type: application/json
      json:
        - id: !anystr
          destinations:
            - id: !anystr


---
test_name: Test audience operations for non-existent audience

strict:
  - json:list_any_order

includes:
  - !include common.yaml

stages:
  - name: Get destinations and save facebook destination object

    request:
      url: "{host}/{version}/destinations"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {token}"

    response:
      strict: false
      status_code: 200
      headers:
        content-type: application/json
      json:
        - id: !anystr
          name: !anystr
          type: !anystr
          status: !anystr
          is_enabled: !anybool
          is_added: !anybool
          create_time: !anystr
          is_ad_platform: !anybool
          update_time: !anystr
      save:
        $ext:
          function: tavern_test_utils:get_destination_by_name
          extra_kwargs:
            destination_name: "Facebook"

  - name: Test retrieving an audience that does not exist

    # Define the request to be made...
    request:
      url: "{host}/{version}/audiences/{fake_object_id}"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {token}"

    response:
      status_code: 404
      headers:
        content-type: application/json

  - name: Test deleting an audience that does not exist

    # Define the request to be made...
    request:
      url: "{host}/{version}/audiences/{fake_object_id}"
      method: DELETE
      headers:
        content-type: application/json
        Authorization: "Bearer {token}"

    response:
      status_code: 204
      headers:
        content-type: application/json

  - name: Test updating an audience that does not exist
      # Define the request to be made...
    request:
      url: "{host}/{version}/audiences/{fake_object_id}"
      method: PUT
      headers:
        content-type: application/json
        Authorization: "Bearer {token}"
      json:
        name: "TAVERN_TEST_AUDIENCE_UPDATED"
        destinations:
          - id: "{destination.id}"
            delivery_platform_config:
              data_extension_name: "txt"

    response:
      strict: false
      # TODO HUS-1164 change this to 404 when the code has been changed
      status_code: 400
      headers:
        content-type: application/json

  - name: Test retrieving country level insights for an audience that does not exist

    # Define the request to be made...
    request:
      url: "{host}/{version}/audiences/{fake_object_id}/countries"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {token}"

    response:
      strict: false
      status_code: 404
      headers:
        content-type: application/json
      json:
        message: !re_search "Audience not found."

  - name: Test retrieving state level insights for an audience that does not exist

    # Define the request to be made...
    request:
      url: "{host}/{version}/audiences/{fake_object_id}/states"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {token}"

    response:
      strict: false
      status_code: 404
      headers:
        content-type: application/json
      json:
        message: !re_search "Audience not found."

  - name: Test retrieving city level insights for an audience that does not exist

    # Define the request to be made...
    request:
      url: "{host}/{version}/audiences/{fake_object_id}/cities?batch_size=10&batch_number=1"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {token}"

    response:
      status_code: 404
      headers:
        content-type: application/json
      json:
        message: !re_search "Audience not found."

  - name: Test retrieving audience insights for an audience that does not exist

    # Define the request to be made...
    request:
      url: "{host}/{version}/audiences/{fake_object_id}/audience_insights"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {token}"

    response:
      status_code: 404
      headers:
        content-type: application/json

  - name: Test download audience insights for an audience that does not exist

    # Define the request to be made...
    request:
      url: "{host}/{version}/audiences/{fake_object_id}/google_ads"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {token}"

    response:
      # TODO HUS-1164 change this to 404 when the code has been changed
      status_code: 404
      headers:
        content-type: application/json
      json:
        message: !re_search "Audience not found."


---
test_name: Test create - update - delete an audience

strict:
  - json:list_any_order

includes:
  - !include common.yaml

stages:

  - name: Get destinations and save facebook destination object

    request:
      url: "{host}/{version}/destinations"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {token}"

    response:
      strict: false
      status_code: 200
      headers:
        content-type: application/json
      json:
        !anylist
        - id: !anystr
          name: !anystr
          type: !anystr
          status: !anystr
          category: !anystr
          feed_count: !anyint
          is_enabled: !anybool
          is_added: !anybool
      save:
        $ext:
          function: tavern_test_utils:get_destination_by_name
          extra_kwargs:
            destination_name: "Facebook"

  # This is the step to get the timestamp
  # A request needs to be made in order to run one of the functions
  # validation is removed since it was done in the previous step and to improve readability
  - name: Get timestamp

    request:
      url: "{host}/{version}/destinations"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {token}"

    response:
      strict: false
      status_code: 200
      headers:
        content-type: application/json
      save:
        $ext:
          function: tavern_test_utils:get_timestamp

  - name: Create the new audience

    # Define the request to be made...
    request:
      url: "{host}/{version}/audiences"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {token}"
      json:
        name: "TAVERN_TEST_AUDIENCE_{timestamp}"
        destinations:
          - id: "{destination.id}"
            delivery_platform_config:
              data_extension_name: "txt"
        engagements: []

    response:
      status_code: 201
      headers:
        content-type: application/json
      save:
        json:
          audience_id: "id"

  - name: Test retrieving country level insights for the new audience

    # Define the request to be made...
    request:
      url: "{host}/{version}/audiences/{audience_id}/countries"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {token}"

    response:
      strict: false
      status_code: 200
      json:
        !anylist
        - size: !anyint
          revenue: !anyfloat
          country: !anystr
      headers:
        content-type: application/json

  - name: Test retrieving state level insights for the new audience

    # Define the request to be made...
    request:
      url: "{host}/{version}/audiences/{audience_id}/states"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {token}"

    response:
      strict: false
      status_code: 200
      json:
        - size: !anyint
          revenue: !anyfloat
          state: !anystr
          country: !anystr
      headers:
        content-type: application/json

  - name: Test retrieving city level insights for the new audience

    # Define the request to be made...
    request:
      url: "{host}/{version}/audiences/{audience_id}/cities?batch_size=10&batch_number=1"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {token}"

    response:
      strict: false
      status_code: 200
      json:
        - size: !anyint
          revenue: !anyfloat
          state: !anystr
          country: !anystr
          city: !anystr
      headers:
        content-type: application/json

  - name: Test retrieving audience insights for the new audience

    # Define the request to be made...
    request:
      url: "{host}/{version}/audiences/{audience_id}/audience_insights"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {token}"

    response:
      status_code: 200
      json:
        demo:
          - name: !anystr
            population_percentage: !anyfloat
            size: !anyint
            gender_women: !anyfloat
            gender_men: !anyfloat
            gender_other: !anyfloat
            ltv: !anyfloat
        income:
          - name: !anystr
            ltv: !anyfloat
        spend:
          gender_women:
            - date: !anystr
              ltv: !anyfloat
          gender_men:
            - date: !anystr
              ltv: !anyfloat
          gender_other:
            - date: !anystr
              ltv: !anyfloat
        gender:
          gender_women:
            population_percentage: !anyfloat
            size: !anyint
          gender_men:
            population_percentage: !anyfloat
            size: !anyint
          gender_other:
            population_percentage: !anyfloat
            size: !anyint
      headers:
        content-type: application/json

  - name: Update the new audience
      # Define the request to be made...
    request:
      url: "{host}/{version}/audiences/{audience_id}"
      method: PUT
      headers:
        content-type: application/json
        Authorization: "Bearer {token}"
      json:
        name: "TAVERN_TEST_AUDIENCE_UPDATED"
        destinations:
          - id: "{destination.id}"
            delivery_platform_config:
              data_extension_name: "txt"

    response:
      strict: false
      status_code: 200
      headers:
        content-type: application/json
      json:
        name: "TAVERN_TEST_AUDIENCE_UPDATED"
        id: "{audience_id}"

  - name: Delete the new audience
      # Define the request to be made...
    request:
      url: "{host}/{version}/audiences/{audience_id}"
      method: DELETE
      headers:
        content-type: application/json
        Authorization: "Bearer {token}"

    response:
      strict: false
      status_code: 204
      headers:
        content-type: application/json
