# This is the CI pipeline for Unified Solution API

version: "1.0"

stages:
  - prepare
  - git
  - build_tag
  - docker
  - py37_check
  - safety_style_check
  - artifactory
  - argo-deploy

steps:

  PrepareBuildDetails:
    stage: prepare
    title: Prepare Build Details
    type: parallel
    steps:
      BuildName:
        stage: prepare
        title: Set build variables
        image: alpine
        commands:
          - cf_export BUILD_NAME=unified-api
          - cf_export JFROG_REGISTRY=unified-docker-dev-local
          - cf_export FILE_NAME=values-main-use1-hux-unified-dev1.yaml

      BuildNumber:
        stage: prepare
        title: Bump default BUILD_NUMBER annotation
        type: bump-build-number

  CloneRepository:
    stage: git
    title: Cloning ${{CF_REPO_NAME}} repository...
    type: git-clone
    repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
    revision: '${{CF_BRANCH}}' # Git branch triggering the pipeline

# Below steps "NumberTag" and "VersionTag" can be used to conditionally tag build image based on the Git Branch.

  NumberTag:
    stage: build_tag
    description: Set docker tag from build number
    type: freestyle
    image: alpine
    commands:
      - cf_export DOCKER_TAG=${{CF_BUILD_NUMBER}}

# Below step can be used for tagging image with Git_Release_Tag and will only execute for "main" branch
# No releases present currently, to be uncommented once releases will be present.
  # VersionTag:
  #   stage: build_tag
  #   description: Set docker tag based Git tag
  #   type: freestyle
  #   image: alpine
  #   commands:
  #     - cf_export DOCKER_TAG=${{CF_RELEASE_TAG}}
  #   when:
  #     condition:
  #       all:
  #         masterBranch: '"${{CF_BRANCH}}" == "main"'

  build_image:
    stage: "docker"
    title: "Building Docker Image for Unified API"
    type: "build"
    image_name: '${{BUILD_NAME}}'
    working_directory: '${{CF_REPO_NAME}}'
    dockerfile: 'hux/api/Dockerfile'
    tag: '${{DOCKER_TAG}}'
    build_arguments:
      - ARTIFACTORY_PYTHON_READ=${{ARTIFACTORY_PYTHON_READ}}

  py37_check:
    stage: "py37_check"
    title: "Tox - py37"
    image: "${{build_image}}"
    working_directory: '/app/hux-unified/api'
    description: "run tests using tox"
    commands:
      - pip install --upgrade pip
      - pip install tox
      - tox -e ${TOXENV} -- --skip-model-generate
    scale:
      py37:
        title: 'py37'
        environment:
          - TOXENV=py37
    fail_fast: false

  safety_style_check:
    stage: "safety_style_check"
    title: "Tox - safety and style"
    image: "${{build_image}}"
    working_directory: '/app/hux-unified/api'
    description: "run safety and style checks using tox"
    commands:
      - pip install --upgrade pip
      - pip install tox
      - tox -e ${TOXENV} -- --skip-model-generate
    scale:
      safety:
        title: 'safety'
        environment:
          - TOXENV=safety
      style:
        title: 'style'
        environment:
          - TOXENV=style
    fail_fast: false

  PublishToArtifactory:
    stage: artifactory
    title: Publish Unified API Image to JFrog Artifactory
    type: deloittehux/jfrog-docker-publish
    arguments:
      BUILD_NAME: '${{BUILD_NAME}}'
      BUILD_NUMBER: '${{DOCKER_TAG}}'
      JFROG_REGISTRY: '${{JFROG_REGISTRY}}'
      BUILD_TAG: '${{DOCKER_TAG}}'
    when:
      branch:
        only:
          - main

  deployment:
    stage: argo-deploy
    description: "Deploy the application"
    type: freestyle
    image: codefresh/cli:latest
    commands:
      - >-
        codefresh run Hux_Unified_Solution/unified_solution_cd -d -t
        DeloitteHux/hux-unified-deploy -b 'main' --variable
        DOCKER_TAG=${{DOCKER_TAG}} --variable FILE_NAME="${{FILE_NAME}}"
        --variable APP_NAME="${{BUILD_NAME}}" --variable
        COMMIT_MESSAGE="${{CF_COMMIT_MESSAGE}}" --variable
        COMMIT_AUTHOR="${{CF_COMMIT_AUTHOR}}"
    when:
      branch:
        only:
          - main
