# This is the CI pipeline for Unified Solution API

version: "1.0"

stages:
  - prepare
  - git
  - build_tag
  - set_env
  - set_env_artifactory_token
  - docker
  - tox_parallel
  - tox_api_unittests
  - artifactory
  - argo-deploy

steps:

  PrepareBuildDetails:
    stage: prepare
    title: Prepare Build Details
    type: parallel
    steps:
      GetTriggerName:
        stage: prepare
        title: get trigger name using id from spec yaml
        type: deloittehux/get-trigger-name
      BuildNumber:
        stage: prepare
        title: Bump default BUILD_NUMBER annotation
        type: bump-build-number

  CloneRepository:
    stage: git
    title: Cloning ${{CF_REPO_NAME}} repository...
    type: git-clone
    repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
    revision: '${{CF_BRANCH}}' # Git branch triggering the pipeline

# Below steps "NumberTag" and "VersionTag" can be used to conditionally tag build image based on the Git Branch.

  NumberTag:
    stage: build_tag
    description: Set docker tag from build number
    type: freestyle
    image: huxhub.repo.mgnt.in/alpine
    commands:
      - cf_export DOCKER_TAG=${{CF_BUILD_NUMBER}}

# Below step can be used for tagging image with Git_Release_Tag and will only execute for "main" branch

  VersionTag:
    stage: build_tag
    description: Set docker tag based Git tag
    type: freestyle
    image: huxhub.repo.mgnt.in/alpine
    commands:
      - cf_export DOCKER_TAG=${{CF_BRANCH}}
    when:
      branch:
        only:
          - /^app.*/i

  set_global_vars:
    stage: set_env
    title: Set environment variables
    type: freestyle
    image: huxhub.repo.mgnt.in/yq
    working_directory: "${{CF_REPO_NAME}}/${{SUB_REPO}}/ci"
    commands:
      # Set Global vars
      - yq r $VARS_FILE 'global' | sed -e 's/:\ /=/g' >> ${{CF_VOLUME_PATH}}/env_vars_to_export
    environment:
      - VARS_FILE=codefresh_vars.yml

  jfrog_python_artifactory_read:
    stage: set_env_artifactory_token
    title: "Get artifactory token"
    type: deloittehux/jfrog-python-artifactory-read
    arguments:
      JFROG_API_KEY: '${{JFROG_API_KEY}}'
      JFROG_USERNAME: '${{JFROG_USERNAME}}'

  build_image:
    stage: "docker"
    title: "Building Docker Image for Unified API"
    type: "build"
    image_name: "${{APP_NAME}}"
    working_directory: '${{CF_REPO_NAME}}'
    dockerfile: '${{SUB_REPO}}/Dockerfile'
    tag: '${{DOCKER_TAG}}'
    build_arguments:
      - ARTIFACTORY_PYTHON_READ=${{ARTIFACTORY_PYTHON_READ}}

  Tox_Tests:
    stage: tox_parallel
    title: "Tox Pylint and Coverage checks."
    image: huxhub.repo.mgnt.in/tox-ci
    working_directory: '${{CF_REPO_NAME}}/${{SUB_REPO}}'
    description: "run tests using tox"
    commands:
      - tox -e ${TOXENV} -- --skip-model-generate
    scale:
      checkCoverage:
        title: 'checkCoverage'
        environment:
          - TOXENV=checkCoverage
      pylintCheck:
        title: 'pylintCheck'
        environment:
          - TOXENV=pylintCheck
    fail_fast: false

  Tox_UnitTests:
    stage: tox_api_unittests
    title: "Tox - Style and Unittests"
    image: huxhub.repo.mgnt.in/tox-ci
    working_directory: '${{CF_REPO_NAME}}/${{SUB_REPO}}'
    description: "run tests using tox"
    commands:
      - tox -e ${TOXENV} -- --skip-model-generate
    scale:
      py37:
        title: 'py37'
        environment:
          - TOXENV=py37
    fail_fast: false

  PublishToArtifactory:
    stage: artifactory
    title: Publish Unified API Image to JFrog Artifactory
    type: deloittehux/jfrog-docker-publish
    arguments:
      BUILD_NAME: '${{APP_NAME}}'
      BUILD_NUMBER: '${{DOCKER_TAG}}'
      JFROG_REGISTRY: '${{DEV_REGISTRY}}'
      BUILD_TAG: '${{DOCKER_TAG}}'
    when:
      branch:
        only:
          - main
          - develop
          - /^release-[\d].*/i
          - /^app.*/i

  deployment:
    stage: argo-deploy
    description: "Deploy the application"
    type: freestyle
    image: codefresh/cli:latest
    commands:
      - >-
        codefresh run Hux_Unified_Solution/unified_solution_api_cd -d -t 'dev_deploy'
        -b 'main'
        --variable SUB_REPO="${{SUB_REPO}}"
        --variable COMMIT_AUTHOR="${{CF_COMMIT_AUTHOR}}"
        --variable COMMIT_MESSAGE="${{CF_COMMIT_MESSAGE}}"
        --variable DOCKER_TAG=${{DOCKER_TAG}}
        --variable CI_REVISION="${{CF_BRANCH}}"

    when:
      branch:
        only:
          - main
          - develop
          - /^release-[\d].*/i
          - /^app.*/i
