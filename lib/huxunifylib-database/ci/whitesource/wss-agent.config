###############################################################
# WhiteSource Unified-Agent configuration file
# Full documentation at https://whitesource.atlassian.net/wiki/spaces/WD/pages/1544880156/Unified+Agent+Configuration+Parameters#Python
###############################################################

######################
# Organization vitals
######################

wss.url=https://deloitte.whitesourcesoftware.com/agent
#apiKey=  #API key provided as Shared Configuration in Codefresh
printCliErrors=true

######################
# Top level is Product
######################
productName=hux-unified
## productVersion will be not be set and remain blank.
# productVersion=

######################
# Under Product is Project
######################
projectName=huxunifylib-database
## projectVersion will be set in pipeline depending on branch trigger
# projectVersion=

######################
# Which files to include/exclude in the scan (file extensions, file names. folder names, etc.). 
# These parameters can receive a list of arguments delimited by a comma, semicolon, or space. 
# Use only one exclude line and one include line.
######################
includes=**/*.py
# excludes=
case.sensitive.glob=false
followSymbolicLinks=true
log.level=info

###############################################################
# Python Configuration Parameters
###############################################################

# python.resolveDependencies
# Whether to resolve python dependencies. "requirements.txt"  or "pipfile" are required.
# Default: true

# python.ignoreSourceFiles
# When using the dependency resolver, it will only include package dependencies, not source files. NOTE: Only relevant when fileSystemScan is true.
# Ignores *.py files in scan.
# Default: true

python.ignorePipInstallErrors=true
# Whether to ignore errors of 'pip download -r requirements.txt' command. Ignores download errors, and try to download packages one by one
# Default: false

# python.installVirtualenv
# Whether to install the pip 'virtualenv' on --user. Installs a virtual environment by running "python -m pip install --user virtualenv"
# Default: false

# python.resolveHierarchyTree 
# Whether to resolve the hierarchy tree or a flat list of dependencies, requires "requirements.txt" like files. Will install pipdeptree and use it to resolve and find the dependency hierarchy tree.
# Default: true

# python.requirementsFileIncludes
# Space-delimited list of dependency filenames specifying which files to be scanned for dependencies, instead of "requirements.txt", when using pip package manager.
# Default: requirements.txt

python.resolveSetupPyFiles=true
# Whether to resolve python dependencies in setup.py files, and if so, it executes the setup.py script in order to install and resolve dependencies. Executes setup.py in order to install and resolve dependencies.
# Default: false

# python.runPipenvPreStep
# Whether to run pipenv install command. If so, it requires "pipfile". Runs the 'pipenv install' command.
# Default: false

# python.pipenvDevDependencies 
# Whether or not to install "dev" dependencies, if so it requires "python.runPipenvPreStep=true". Adds --dev to the command, resulting in: "pipenv install --dev".
# Default: true

python.IgnorePipenvInstallErrors=true 
# Whether to ignore errors of the 'pipenv run pip download' command. Ignores download errors, and try to download packages one by one.
# Default: false

# python.resolveGlobalPackages 
# Whether to resolve global packages or not. If so, it requires global package folders called site-packages or dist-packages in your scan directory. If set to True and there is a site-packages or dist-packages folder, the resolution will be based on the packages under those folders. 
# Default: false

# python.resolvePipEditablePackages
# The parameter handles requirements.txt files with rows (packages) with the -e flag. Additionally, it resolves the dev dependencies of the package itself.
# NOTE: Currently supported only for pip.
# Default: false

# python.path
# Points to the python executable path. If the executable path is already set in the environment variables, then just the executable name can be defined, e.g. in Linux  "python2.7".
# NOTE: This parameter replaces "python" executable with the value defined.
# Default: python

# python.pipPath
# Enables you to use different versions of pip. If set to pip3, will run "pip3" and "python -m pip3" instead of "pip" and "python -m pip".
# Default: pip

# python.runPoetryPreStep
# Whether to run "poetry install" command.
# Default: false

# python.includePoetryDevDependencies
# Whether to scan Poetry project dev dependencies.
# Default: false

# python.localPackagePathsToInstall
# A space-delimited list of local package paths that will be installed during the pre-step, if is required.
# Default: empty

# python.indexUrl
# The local Pypi repository url, besides the official Pypi repository. Use if you have dependencies downloaded from a different source than the default pypi.
# Default: pypi.org

# python.includePipenvDevDependencies
# Enables you to include or exclude dev dependencies.
# Default: true
